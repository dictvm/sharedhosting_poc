---

- name: Configure SELinux Sandbox
  hosts: all
  become: yes

  vars:
    user: anotheruser

  tasks:
    - name: Set SELinux to Enforcing
      selinux: policy=targeted state=enforcing
      register: selinux_state

    - name: Get SELinux label status
      shell: ls -Z | grep redhat-release
      args:
        chdir: /etc/
      register: selinux_label_state
      ignore_errors: true
      changed_when: false

    - debug: var=selinux_label_state

    - name: Enable relabel of filesystem during reboot
      file:
        path: /.autorelabel
        state: touch
      when: "'system_u:object_r:etc_t:s0' not in selinux_label_state.stdout"

    - name: Reboot to set SELinux state
      shell: /sbin/shutdown -r now
      async: 0
      poll: 0
      ignore_errors: true
      when: selinux_state|changed

    - name: Wait for reboot and relabeling to finish
      wait_for:
        host: "{{ ansible_default_ipv4.address }}"
        port: 22
        delay: 90
        timeout: 300
        state: started
      when: selinux_state|changed

    - name: Install EPEL
      yum:
        name: epel-release
        state: present
      register: epelstate

    - name: Install requirements
      package:
        name: "{{ item }}"
        state: present
        update_cache: "{{ epelstate | changed }}"
      with_items:
        - httpd
        - setroubleshoot-server
        - setools-console
        - mcstrans
        - policycoreutils-python
        - policycoreutils-restorecond
        - selinux-policy-devel
        - htop
        - python34
        - zsh
        - tmux
        - rsync
        - nc
        - ruby
        - git
        - "@Development Tools"

    - name: Start services
      service:
        name: "{{ item }}"
        enabled: yes
        state: started
      with_items:
        - httpd
        - restorecond

    - name: Open firewall for httpd
      firewalld:
        service: http
        permanent: true
        state: enabled

    - name: Create user
      user:
        name: "{{ user }}"
        state: present

    - name: Copy SELinux shelluser policy template
      template:
        src: shelluser.te.j2
        dest: /tmp/{{ user }}.te

    - name: Compile SELinux policy
      shell: make -f /usr/share/selinux/devel/Makefile {{ user }}.pp
      args:
        chdir: /tmp/
      register: shelluser_policy

    - name: Import compiled SELinux policy
      shell: semodule -i {{ user }}.pp
      args:
        chdir: /tmp/
      register: semodule_state

    - name: Create SELinux user
      shell: semanage user -a -R "{{ user }}_r" "{{ user }}_u"
      register: semanage_state

    - name: Add targeted user context
      template:
        src: shelluser_u.j2
        dest: /etc/selinux/targeted/contexts/users/{{ user }}_u

    - name: Add UNIX user to SELinux context
      shell: usermod -Z "{{ user }}_u" "{{ user }}"
      register: userstate

    - name: Create user httpdocs
      file:
        path: /var/www/virtual/{{ user }}
        state: directory
        seuser: "{{ user }}_u"
        owner: "{{ user }}"
        group: "{{ user }}"

    - name: Confine user to home directory
      file:
        path: /home/{{ user }}
        seuser: "{{ user }}_u"

    - name: Create SSH configuration directory
      file:
        path: /home/{{ user }}/.ssh
        state: directory

    - name: Enable SSH access for {{ user }}
      command: cp /home/vagrant/.ssh/authorized_keys /home/{{ user }}/.ssh/authorized_keys && chown -R {{ user }}:{{ user }} /home/{{ user }}/.ssh/authorized_keys
      args:
        creates: /home/{{ user }}/.ssh/authorized_keys

    - name: Fix directory permissions
      file:
        path: /home/{{ user }}/.ssh
        owner: "{{ user }}"
        group: "{{ user }}"

    - name: Enable outgoing SSH for {{ user }}
      command: semanage port -m -t {{ user }}_port_t -p tcp 22
